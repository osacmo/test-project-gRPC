// source: usuarios.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.usuarios.MsgResponse', null, global);
goog.exportSymbol('proto.usuarios.Usuario', null, global);
goog.exportSymbol('proto.usuarios.UsuarioEstatus', null, global);
goog.exportSymbol('proto.usuarios.UsuarioType', null, global);
goog.exportSymbol('proto.usuarios.UsuariosList', null, global);
goog.exportSymbol('proto.usuarios.getUsuarioRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.usuarios.Usuario = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.usuarios.Usuario, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.usuarios.Usuario.displayName = 'proto.usuarios.Usuario';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.usuarios.UsuariosList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.usuarios.UsuariosList.repeatedFields_, null);
};
goog.inherits(proto.usuarios.UsuariosList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.usuarios.UsuariosList.displayName = 'proto.usuarios.UsuariosList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.usuarios.MsgResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.usuarios.MsgResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.usuarios.MsgResponse.displayName = 'proto.usuarios.MsgResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.usuarios.getUsuarioRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.usuarios.getUsuarioRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.usuarios.getUsuarioRequest.displayName = 'proto.usuarios.getUsuarioRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.usuarios.Usuario.prototype.toObject = function(opt_includeInstance) {
  return proto.usuarios.Usuario.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.usuarios.Usuario} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.usuarios.Usuario.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    usuario: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contrasena: jspb.Message.getFieldWithDefault(msg, 3, ""),
    estatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tipo: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.usuarios.Usuario}
 */
proto.usuarios.Usuario.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.usuarios.Usuario;
  return proto.usuarios.Usuario.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.usuarios.Usuario} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.usuarios.Usuario}
 */
proto.usuarios.Usuario.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsuario(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContrasena(value);
      break;
    case 4:
      var value = /** @type {!proto.usuarios.UsuarioEstatus} */ (reader.readEnum());
      msg.setEstatus(value);
      break;
    case 5:
      var value = /** @type {!proto.usuarios.UsuarioType} */ (reader.readEnum());
      msg.setTipo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.usuarios.Usuario.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.usuarios.Usuario.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.usuarios.Usuario} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.usuarios.Usuario.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUsuario();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContrasena();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTipo();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.usuarios.Usuario.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.usuarios.Usuario} returns this
 */
proto.usuarios.Usuario.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string usuario = 2;
 * @return {string}
 */
proto.usuarios.Usuario.prototype.getUsuario = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.usuarios.Usuario} returns this
 */
proto.usuarios.Usuario.prototype.setUsuario = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contrasena = 3;
 * @return {string}
 */
proto.usuarios.Usuario.prototype.getContrasena = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.usuarios.Usuario} returns this
 */
proto.usuarios.Usuario.prototype.setContrasena = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional UsuarioEstatus estatus = 4;
 * @return {!proto.usuarios.UsuarioEstatus}
 */
proto.usuarios.Usuario.prototype.getEstatus = function() {
  return /** @type {!proto.usuarios.UsuarioEstatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.usuarios.UsuarioEstatus} value
 * @return {!proto.usuarios.Usuario} returns this
 */
proto.usuarios.Usuario.prototype.setEstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional UsuarioType tipo = 5;
 * @return {!proto.usuarios.UsuarioType}
 */
proto.usuarios.Usuario.prototype.getTipo = function() {
  return /** @type {!proto.usuarios.UsuarioType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.usuarios.UsuarioType} value
 * @return {!proto.usuarios.Usuario} returns this
 */
proto.usuarios.Usuario.prototype.setTipo = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.usuarios.UsuariosList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.usuarios.UsuariosList.prototype.toObject = function(opt_includeInstance) {
  return proto.usuarios.UsuariosList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.usuarios.UsuariosList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.usuarios.UsuariosList.toObject = function(includeInstance, msg) {
  var f, obj = {
    usuariosList: jspb.Message.toObjectList(msg.getUsuariosList(),
    proto.usuarios.Usuario.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.usuarios.UsuariosList}
 */
proto.usuarios.UsuariosList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.usuarios.UsuariosList;
  return proto.usuarios.UsuariosList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.usuarios.UsuariosList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.usuarios.UsuariosList}
 */
proto.usuarios.UsuariosList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.usuarios.Usuario;
      reader.readMessage(value,proto.usuarios.Usuario.deserializeBinaryFromReader);
      msg.addUsuarios(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.usuarios.UsuariosList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.usuarios.UsuariosList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.usuarios.UsuariosList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.usuarios.UsuariosList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsuariosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.usuarios.Usuario.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Usuario usuarios = 1;
 * @return {!Array<!proto.usuarios.Usuario>}
 */
proto.usuarios.UsuariosList.prototype.getUsuariosList = function() {
  return /** @type{!Array<!proto.usuarios.Usuario>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.usuarios.Usuario, 1));
};


/**
 * @param {!Array<!proto.usuarios.Usuario>} value
 * @return {!proto.usuarios.UsuariosList} returns this
*/
proto.usuarios.UsuariosList.prototype.setUsuariosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.usuarios.Usuario=} opt_value
 * @param {number=} opt_index
 * @return {!proto.usuarios.Usuario}
 */
proto.usuarios.UsuariosList.prototype.addUsuarios = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.usuarios.Usuario, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.usuarios.UsuariosList} returns this
 */
proto.usuarios.UsuariosList.prototype.clearUsuariosList = function() {
  return this.setUsuariosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.usuarios.MsgResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.usuarios.MsgResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.usuarios.MsgResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.usuarios.MsgResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.usuarios.MsgResponse}
 */
proto.usuarios.MsgResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.usuarios.MsgResponse;
  return proto.usuarios.MsgResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.usuarios.MsgResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.usuarios.MsgResponse}
 */
proto.usuarios.MsgResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.usuarios.MsgResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.usuarios.MsgResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.usuarios.MsgResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.usuarios.MsgResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.usuarios.MsgResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.usuarios.MsgResponse} returns this
 */
proto.usuarios.MsgResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.usuarios.getUsuarioRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.usuarios.getUsuarioRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.usuarios.getUsuarioRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.usuarios.getUsuarioRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.usuarios.getUsuarioRequest}
 */
proto.usuarios.getUsuarioRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.usuarios.getUsuarioRequest;
  return proto.usuarios.getUsuarioRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.usuarios.getUsuarioRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.usuarios.getUsuarioRequest}
 */
proto.usuarios.getUsuarioRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.usuarios.getUsuarioRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.usuarios.getUsuarioRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.usuarios.getUsuarioRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.usuarios.getUsuarioRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.usuarios.getUsuarioRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.usuarios.getUsuarioRequest} returns this
 */
proto.usuarios.getUsuarioRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.usuarios.UsuarioEstatus = {
  OFFLINE: 0,
  AVAILABLE: 1
};

/**
 * @enum {number}
 */
proto.usuarios.UsuarioType = {
  UNKNOWN: 0,
  CLIENTE: 1,
  ADMIN: 2
};

goog.object.extend(exports, proto.usuarios);
